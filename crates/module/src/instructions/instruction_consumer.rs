use super::*;
use crate::objects::instruction::ControlInstruction;

pub trait InstructionConsumer {
    fn write_ibinary(&mut self, i: IBinaryInstruction);
    fn write_fbinary(&mut self, i: FBinaryInstruction);
    fn write_iunary(&mut self, i: IUnaryInstruction);
    fn write_funary(&mut self, i: FUnaryInstruction);
    fn write_block(&mut self, i: Block);
    fn write_brif(&mut self, i: BrIf);
    fn write_br(&mut self, i: Br);
    fn write_br_table(&mut self, i: BrTable);
    fn write_call_indirect(&mut self, i: CallIndirect);
    fn write_call(&mut self, i: Call);
    fn write_if_else(&mut self, i: IfElse);
    fn write_else(&mut self);
    fn write_loop(&mut self, i: Loop);
    fn write_end(&mut self);
    fn write_return(&mut self);
    fn write_unreachable(&mut self);
    fn write_store(&mut self, i: StoreInstruction);
    fn write_load(&mut self, i: LoadInstruction);
    fn write_test(&mut self, i: ITestInstruction);
    fn write_memory_size(&mut self, i: MemorySizeInstruction);
    fn write_memory_grow(&mut self, i: MemoryGrowInstruction);
    fn write_memory_copy(&mut self, i: MemoryCopyInstruction);
    fn write_memory_fill(&mut self, i: MemoryFillInstruction);
    fn write_memory_init(&mut self, i: MemoryInitInstruction);
    fn write_data_drop(&mut self, i: DataDropInstruction);
    fn write_trunc(&mut self, i: TruncInstruction);
    fn write_trunc_saturation(&mut self, i: TruncSaturationInstruction);
    fn write_irelational(&mut self, i: IRelationalInstruction);
    fn write_frelational(&mut self, i: FRelationalInstruction);
    fn write_wrap(&mut self, i: WrapInstruction);
    fn write_convert(&mut self, i: ConvertInstruction);
    fn write_reinterpret(&mut self, i: ReinterpretInstruction);
    fn write_extend_bits(&mut self, i: ExtendBitsInstruction);
    fn write_extend_type(&mut self, i: ExtendTypeInstruction);
    fn write_demote(&mut self, i: DemoteInstruction);
    fn write_promote(&mut self, i: PromoteInstruction);
    fn write_const(&mut self, i: Constant);
    fn write_reference_is_null(&mut self, i: ReferenceIsNullInstruction);
    fn write_reference_null(&mut self, i: ReferenceNullInstruction);
    fn write_reference_function(&mut self, i: ReferenceFunctionInstruction);
    fn write_select(&mut self, i: SelectInstruction);
    fn write_table_set(&mut self, i: TableSetInstruction);
    fn write_table_get(&mut self, i: TableGetInstruction);
    fn write_table_grow(&mut self, i: TableGrowInstruction);
    fn write_table_size(&mut self, i: TableSizeInstruction);
    fn write_table_fill(&mut self, i: TableFillInstruction);
    fn write_table_copy(&mut self, i: TableCopyInstruction);
    fn write_table_init(&mut self, i: TableInitInstruction);
    fn write_elem_drop(&mut self, i: ElemDropInstruction);
    fn write_local_get(&mut self, i: LocalGetInstruction);
    fn write_global_get(&mut self, i: GlobalGetInstruction);
    fn write_local_set(&mut self, i: LocalSetInstruction);
    fn write_global_set(&mut self, i: GlobalSetInstruction);
    fn write_local_tee(&mut self, i: LocalTeeInstruction);
    fn finish(&mut self, terminator: ControlInstruction);
    fn is_finished(&self) -> bool;
    fn peek_terminator(&self) -> &ControlInstruction;
}
